package org.ics.test;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;

import org.ics.ejb.Building;
import org.ics.ejb.Office;
import org.ics.facade.FacadeLocal;

import junit.framework.TestCase;

public class TestFacadeEJB_JUnitEE_Office extends TestCase {

	public TestFacadeEJB_JUnitEE_Office(String name) {
		super(name);
	}

	FacadeLocal facadeLocal;
	
	//No test for primary key, because it's autogenerated.
	String expectedVentilationSetting;
	int expectedTemperatureSetting;
	String expectedBuildingAddress;
	String expectedOfficeNumber;

	String expectedUpdatedVentilationSetting;
	int expectedUpdatedTemperatureSetting;
	String expectedUpdatedBuildingAddress;
	
	Office office1;
	Office office2;
	Building building1;
	Building building2;

	protected void setUp() throws Exception {
		super.setUp();
		
		expectedBuildingAddress = "Danderyd";
		expectedVentilationSetting = "V2";
		expectedTemperatureSetting = 20;

		expectedUpdatedVentilationSetting = "V4";
		expectedUpdatedTemperatureSetting = 19;
		expectedUpdatedBuildingAddress = "Tensta";

		Context context = new InitialContext();
		facadeLocal = (FacadeLocal) context.lookup("java:app/EJBSoftwareArchitectureProject/Facade!org.ics.facade.FacadeLocal");
		
		office1 = new Office();
		building1 = facadeLocal.findByAddress(expectedBuildingAddress);
		building2 = facadeLocal.findByAddress(expectedUpdatedBuildingAddress);

	}

	protected void tearDown() throws Exception {
		super.tearDown();

		facadeLocal.deleteOffice(expectedOfficeNumber);
		facadeLocal = null;

		office1 = null;
		office2 = null;
		building1 = null;
		building2 = null;
	}

	public void testFacadeOffice() {
		office1.setBuilding(building1);
		office1.setTemperatureSetting(expectedTemperatureSetting);
		office1.setVentilationSetting(expectedVentilationSetting);
		
		office1 = facadeLocal.createOffice(office1);
		
		expectedOfficeNumber = office1.getOfficeNumber();
		
		office2 = facadeLocal.findByOfficeNumber(expectedOfficeNumber);
		//No test of primary key, because it is auto-generated in SQL.
		assertEquals(office2.getBuilding().getAddress(), expectedBuildingAddress);
		assertEquals(office2.getTemperatureSetting(), expectedTemperatureSetting);
		assertEquals(office2.getVentilationSetting(), expectedVentilationSetting);
	}
	
	public void testUpdateOffice() {
		Office updatedOffice = new Office(expectedOfficeNumber, expectedUpdatedVentilationSetting, expectedUpdatedTemperatureSetting, building2);
		office1 = facadeLocal.updateOffice(updatedOffice);
		office2 = facadeLocal.findByOfficeNumber(expectedOfficeNumber);
		assertEquals(office2.getBuilding().getAddress(), expectedUpdatedBuildingAddress);
		assertEquals(office2.getTemperatureSetting(), expectedUpdatedTemperatureSetting);
		assertEquals(office2.getVentilationSetting(), expectedUpdatedVentilationSetting);
	}
	
	public void testFacadeOffices() {
		List<Building> buildings = facadeLocal.getAllBuildings();
		List<Office> expectedOffices = facadeLocal.getAllOffices();
		List<Office> foundOfficesInBuildings = new ArrayList<Office>();
		
		for(Building b : buildings) {
			foundOfficesInBuildings.addAll(b.getOffices());
		}
		
		assertEquals(foundOfficesInBuildings.size(), expectedOffices.size());
	}

}
